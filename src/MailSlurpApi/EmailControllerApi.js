/**
 * MailSlurp API
 * Send and receive email from ephemeral email addresses via REST. Test email signup, verification codes, transactional-mail and more.  ### About [MailSlurp](https://www.mailslurp.com/) is a SAAS API for sending and receiving emails from ephemeral email inboxes. These inboxes can be created on the fly and each has a unique email address.  ### Why MailSlurp was built for **testing software or processes that interact with email in some way**. For more information see the [homepage](https://www.mailslurp.com/).  ### Links  - [Create an account](https://app.mailslurp.com/) - [Get API Key](https://app.mailslurp.com/) - [API Documentation](https://docs.mailslurp.com/) - [Official SDK Libraries](https://github.com/mailslurp) - [Support](https://www.mailslurp.com/#support) / [Issues](mailto:contact@mailslurp.com) - [Swagger JSON](https://swagger.mailslurp.com/)   ### Usage **Recommended** There is a hand written [Javascript SDK](https://www.npmjs.com/package/mailslurp-client) with Typescript support. It is [published on NPM](https://www.npmjs.com/package/mailslurp-client) and is the recommended client. However if you don't want to use it see the generated SDKs below in other languages.  - `npm install mailslurp-client`  See NPM package for [more information](https://www.npmjs.com/package/mailslurp-client).  **HTTP API** You can call the MailSlurp API from any HTTP client in any language. HTTP endpoints are [documented here](https://docs.mailslurp.com).  **Other official SDKs** Or you use one of the official generated [SDK Libraries](https://github.com/mailslurp).  - [Official Typescript SDK](https://github.com/mailslurp/swagger-sdk-typescript-fetch) - [Official Python SDK](https://github.com/mailslurp/swagger-sdk-python) - [Official C# SDK](https://github.com/mailslurp/swagger-sdk-csharp) - [Official Java SDK](https://github.com/mailslurp/swagger-sdk-java) - [Official Swift SDK](https://github.com/mailslurp/swagger-sdk-swift) - [Official Golang SDK](https://github.com/mailslurp/swagger-sdk-go) - [Official Javascript SDK](https://github.com/mailslurp/swagger-sdk-javascript) - [Official PHP SDK](https://github.com/mailslurp/swagger-sdk-php) - [Official Ruby SDK](https://github.com/mailslurp/swagger-sdk-ruby)  **Custom SDKs** You can also compile your own library with SwaggerCodegen and the [Swagger Spec](https://swagger.mailslurp.com).  **Demo application** Lastly, there is an interactive GUI available at [demo.mailslurp.com](https://demo.mailslurp.com/) for testing requests.  ### Authentication An [API Key](#authentication) must be passed as a header in all requests. To get an API Key [sign up](https://app.mailslurp.com/sign-up) and log in to the [MailSlurp Dashboard](https://app.mailslurp.com/) web app.  > Use `test` as an API Key when using the demo application.  ### Terminology - [Inbox](#/definitions/InboxDto)     - A unique email address     - Unlimited in number     - Can send and receive emails - [Email](#/definitions/Email)     - Belongs to an inbox     - Contains summary and body     - Raw content stored on S3  ### Example operation - Before you send or receive an email you need to create an inbox - It is recommended to create a new empty inbox for each test case run - The inbox email address is returned with the response for the GetInbox and CreateInbox operations. - You can send an email (from your application or MailSlurp) to that address and it will be saved in the matching inbox - To get the email, ListEmails in the inbox and get a list of the current emails. Then GetEmail by the id given. - Emails are asynchronous so **it is highly recommended to use the minCount** parameter when using ListEmails so that MailSlurp retries the database until your expected count is met. This means you should increase your request timeout accordingly.   ### Support **Issues** If you encounter issues please [contact the developers](mailto:contact@mailslurp.com) or open a ticket in [GitHub](https://www.github.com/mailslurp).  **Contact** Please contact MailSlurp at any time via [the support page](https://www.mailslurp.com/#support). 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: contact@mailslurp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'MailSlurpModels/Email', 'MailSlurpModels/EmailAnalytics'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../MailSlurpModels/Email'), require('../MailSlurpModels/EmailAnalytics'));
  } else {
    // Browser globals (root is window)
    if (!root.MailslurpSwaggerSdk) {
      root.MailslurpSwaggerSdk = {};
    }
    root.MailslurpSwaggerSdk.EmailControllerApi = factory(root.MailslurpSwaggerSdk.ApiClient, root.MailslurpSwaggerSdk.Email, root.MailslurpSwaggerSdk.EmailAnalytics);
  }
}(this, function(ApiClient, Email, EmailAnalytics) {
  'use strict';

  /**
   * EmailController service.
   * @module MailSlurpApi/EmailControllerApi
   * @version 0.0.1-alpha
   */

  /**
   * Constructs a new EmailControllerApi. 
   * @alias module:MailSlurpApi/EmailControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete Email
     * Deletes an email and removes it from the inbox
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteEmailUsingDELETEWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEmailUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API_KEY'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete Email
     * Deletes an email and removes it from the inbox
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteEmailUsingDELETE = function(id) {
      return this.deleteEmailUsingDELETEWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Email Analytics
     * Returns a spam analysis on a given email
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:MailSlurpModels/EmailAnalytics} and HTTP response
     */
    this.getEmailAnalyticsUsingGETWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEmailAnalyticsUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API_KEY'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailAnalytics;

      return this.apiClient.callApi(
        '/emails/{id}/analytics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Email Analytics
     * Returns a spam analysis on a given email
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:MailSlurpModels/EmailAnalytics}
     */
    this.getEmailAnalyticsUsingGET = function(id) {
      return this.getEmailAnalyticsUsingGETWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Email Content
     * Returns a email summary object with headers and content. To retrieve the raw email download it from the &#x60;raw&#x60; url.
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:MailSlurpModels/Email} and HTTP response
     */
    this.getEmailUsingGETWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEmailUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API_KEY'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Email;

      return this.apiClient.callApi(
        '/emails/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Email Content
     * Returns a email summary object with headers and content. To retrieve the raw email download it from the &#x60;raw&#x60; url.
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:MailSlurpModels/Email}
     */
    this.getEmailUsingGET = function(id) {
      return this.getEmailUsingGETWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
